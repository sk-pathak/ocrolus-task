// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: articles.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countArticlesByAuthor = `-- name: CountArticlesByAuthor :one
SELECT COUNT(*) FROM articles WHERE author_id = $1
`

func (q *Queries) CountArticlesByAuthor(ctx context.Context, authorID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, countArticlesByAuthor, authorID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (title, content, author_id)
VALUES ($1, $2, $3)
RETURNING id, title, content, author_id, created_at, updated_at
`

type CreateArticleParams struct {
	Title    string
	Content  string
	AuthorID pgtype.Int8
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, createArticle, arg.Title, arg.Content, arg.AuthorID)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles WHERE id = $1
`

func (q *Queries) DeleteArticle(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteArticle, id)
	return err
}

const getArticle = `-- name: GetArticle :one
SELECT id, title, content, author_id, created_at, updated_at FROM articles WHERE id = $1
`

func (q *Queries) GetArticle(ctx context.Context, id int64) (Article, error) {
	row := q.db.QueryRow(ctx, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT id, title, content, author_id, created_at, updated_at FROM articles ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListArticlesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListArticles(ctx context.Context, arg ListArticlesParams) ([]Article, error) {
	rows, err := q.db.Query(ctx, listArticles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArticlesByAuthor = `-- name: ListArticlesByAuthor :many
SELECT id, title, content, author_id, created_at, updated_at FROM articles
WHERE author_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListArticlesByAuthorParams struct {
	AuthorID pgtype.Int8
	Limit    int32
	Offset   int32
}

func (q *Queries) ListArticlesByAuthor(ctx context.Context, arg ListArticlesByAuthorParams) ([]Article, error) {
	rows, err := q.db.Query(ctx, listArticlesByAuthor, arg.AuthorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :one
UPDATE articles
SET title = $2, content = $3, updated_at = now()
WHERE id = $1
RETURNING id, title, content, author_id, created_at, updated_at
`

type UpdateArticleParams struct {
	ID      int64
	Title   string
	Content string
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) (Article, error) {
	row := q.db.QueryRow(ctx, updateArticle, arg.ID, arg.Title, arg.Content)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
